CapsLock::
KeyWait, CapsLock
if (A_PriorKey="CapsLock")
SetCapsLockState % !GetKeyState("CapsLock", "T")
Return

CapsLock & i:: Send {Blind}{CapsLock up}{Up}
CapsLock & j:: Send {Blind}{CapsLock up}{Left}
CapsLock & k:: Send {Blind}{CapsLock up}{Down}
CapsLock & l:: Send {Blind}{CapsLock up}{Right}

*RControl::Return

$*r::
if GetKeyState("RControl", "P")
  send return{bind}{space}
else
  send {blind}{r}
return

$*q::
if GetKeyState("RControl", "P")
  MouseClick, left
else
  send {blind}{q}
return

$*e::
if GetKeyState("RControl", "P")
  MouseClick, right
else
  send {blind}{e}
return

$*w::
if GetKeyState("RControl", "P")
  MouseMove, 0, -20, 0, R 
else
  send {blind}{w}
return

$*s::
if GetKeyState("RControl", "P")
  MouseMove, 0, 20, 0, R
else
  send {blind}{s}
return

$*a::
if GetKeyState("RControl", "P")
  MouseMove, -20, 0, 0, R
else
  send {blind}{a}
return

$*d::
if GetKeyState("RControl", "P")
  MouseMove, 20, 0, 0, R
else
  send {blind}{d}
return


$*c::
if GetKeyState("RControl", "P")
  send clear{bind}{enter}
else
  send {blind}{c}
return

$*;::
if GetKeyState("RControl", "P")
  send "
else
  send {blind}{;}
return

$*p::
if GetKeyState("RControl", "P")
  send public function{bind}{space}(){bind}{{}}
else
  send {blind}{p}
return

$*t::
if GetKeyState("RControl", "P")
  send $this->
else
  send {blind}{t}
return

$*m::
if GetKeyState("RControl", "P")
  send php artisan make:
else
  send {blind}{m}
return

$*n::
if GetKeyState("RControl", "P")
  send php artisan serve{bind}{enter}
else
  send {blind}{n}
return
